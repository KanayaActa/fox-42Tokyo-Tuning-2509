worker_processes  auto;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # パフォーマンス最適化
    sendfile      on;
    tcp_nopush    on;
    tcp_nodelay   on;
    
    # Gzip圧縮の最適化（高パフォーマンス）
    gzip on;
    gzip_vary on;
    gzip_min_length 512;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/x-javascript
        text/html;

    # SSL最適化
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_prefer_server_ciphers on;

    # バッファサイズ最適化（高パフォーマンス）
    client_body_buffer_size 256k;
    client_max_body_size 20m;
    client_header_buffer_size 2k;
    large_client_header_buffers 8 8k;

    # プロキシバッファ最適化（高パフォーマンス）
    proxy_buffer_size 8k;
    proxy_buffers 16 8k;
    proxy_busy_buffers_size 16k;
    proxy_temp_file_write_size 16k;

    # キャッシュ設定（段階的復活 - E2Eテスト対応）
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=10m use_temp_path=off;
    proxy_cache_key "$scheme$request_method$host$request_uri";
    proxy_cache_valid 200 302 5m;
    proxy_cache_valid 404 1m;
    proxy_cache_use_stale error timeout updating;
    proxy_cache_background_update on;
    proxy_cache_lock on;

    resolver 127.0.0.11 valid=10s;

    access_log off;

    # コネクション最適化（高パフォーマンス）
    keepalive_timeout 75;
    keepalive_requests 2000;
    
    # 追加パフォーマンス設定
    open_file_cache max=10000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    # タイムアウト設定
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    upstream frontend {
        server frontend:3000;
        keepalive 64;
    }

    upstream backend {
        server backend:8080;
        keepalive 64;
    }
    
    upstream jaeger {
        server jaeger:16686;
        keepalive 64;
    }

    server {
        listen 443 ssl;

        ssl_certificate /da/tls/fullchain.pem;
        ssl_certificate_key /da/tls/privkey.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # 静的ファイル配信（画像）の最適化（修正版）
        location /api/v1/image {
            root /app;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # 画像ファイルの直接配信（root使用で修正）
            try_files $uri @backend_image;
            
            # ファイルが見つからない場合はバックエンドにフォールバック
            location @backend_image {
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # バックエンドからの画像もキャッシュ
                proxy_cache api_cache;
                proxy_cache_valid 200 1h;
                proxy_cache_valid 404 1m;
            }
        }

        # 商品一覧API（短時間キャッシュ - E2Eテスト対応）
        location ~ ^/api/v1/product$ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 短時間キャッシュ（E2Eテスト対応）
            proxy_cache api_cache;
            proxy_cache_valid 200 30s;  # 30秒キャッシュ
            proxy_cache_valid 404 10s;
            proxy_cache_use_stale error timeout;
            
            # キャッシュヘッダー追加
            add_header X-Cache-Status $upstream_cache_status;
        }

        # 注文履歴API（短時間キャッシュ - E2Eテスト対応）
        location ~ ^/api/v1/orders$ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 短時間キャッシュ（頻繁更新だが、短時間は有効）
            proxy_cache api_cache;
            proxy_cache_valid 200 15s;  # 15秒キャッシュ
            proxy_cache_valid 404 5s;
            proxy_cache_use_stale error timeout;
            
            # キャッシュヘッダー追加
            add_header X-Cache-Status $upstream_cache_status;
        }

        # ロボットAPI（キャッシュなし、高パフォーマンス）
        location /api/robot/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # パフォーマンス最適化
            proxy_read_timeout     300s;
            proxy_connect_timeout  60s;
            proxy_send_timeout     300s;
            proxy_buffering        on;
            proxy_buffer_size      8k;
            proxy_buffers          16 8k;
            proxy_busy_buffers_size 16k;
            
            # キャッシュ無効化（E2Eテスト対応）
            proxy_cache off;
        }

        # その他のAPI（短時間キャッシュ）
        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 基本最適化
            proxy_read_timeout     60s;
            proxy_connect_timeout  10s;
            proxy_send_timeout     60s;
            
            # 短時間キャッシュ（E2Eテスト対応）
            proxy_cache api_cache;
            proxy_cache_valid 200 20s;  # 20秒キャッシュ
            proxy_cache_valid 404 10s;
            proxy_cache_use_stale error timeout;
            
            # キャッシュヘッダー追加
            add_header X-Cache-Status $upstream_cache_status;
        }

        location /jaeger/ {
            proxy_pass         http://jaeger;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }

        # フロントエンド（WebSocket対応）
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # フロントエンド最適化
            proxy_read_timeout 60s;
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
        }
    }

    server {
        listen 80;

        return 301 https://$host$request_uri;
    }
}
